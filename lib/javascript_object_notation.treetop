grammar JavaScriptObjectNotation
  rule json
    object / nothing
  end

  rule object
    non_empty_object / empty_object
  end

  rule empty_object
    "{" blank "}" {
      def to_object
        {}
      end
    }
  end

  rule non_empty_object
    "{" blank first:keyval blank rest:("," blank next:keyval blank)* "}" {
      def to_object
        rest.elements.each_with_object(first.to_object) do |e, hash|
          hash.merge!(e.next.to_object)
        end
      end
    }
  end

  rule keyval
    key blank separator blank value {
      def to_object
        {key.to_object => value.to_object}
      end
    }
  end

  rule key
    string
  end

  rule value
    string / integer / object / array
  end

  rule array
    array_with_elements / empty_array
  end

  rule empty_array
    "[" blank "]" {
      def to_object
        []
      end
    }
  end

  rule array_with_elements
    '[' blank first:value blank rest:(',' blank next:value blank)* ']' {
      def to_object
        rest.elements.each_with_object([first.to_object]) do |e, array|
          array << e.next.to_object
        end
      end
    }
  end

  rule string
    quote quoted:[a-zA-Z0-9_]+ quote {
      def to_object
        quoted.text_value
      end
    }
  end

  rule integer
    minus? [0-9]+ {
      def to_object
        text_value.to_i
      end
    }
  end

  rule minus
    "-"
  end

  rule quote
    '"'
  end

  rule separator
    ":"
  end

  rule nothing
    "" {
      def to_object
        :nothing
      end
    }
  end

  rule blank
    " "*
  end
end
